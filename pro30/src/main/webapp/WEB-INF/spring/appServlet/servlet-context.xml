<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- <annotation-driven />은 스프링 MVC의 어노테이션 기반 기능을 활성화하기 위한 설정. 
		  이 설정을 추가하면 @RequestMapping, @ModelAttribute, @ResponseBody 등과 같은 
		  주요 어노테이션을 사용할 수 있게 됨. -->
	<!-- 이 설정은 내부적으로 핸들러 매핑과 핸들러 어댑터를 등록하며, 위의 어노테이션들을 인식하고 처리할 수 있도록 함. -->
		  
		  

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
<!-- 	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<beans:property name="prefix" value="/WEB-INF/views/" /> 
		<beans:property name="suffix" value=".jsp" /> 
	</beans:bean> -->

 	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:tiles/*.xml</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="preparerFactoryClass"
			value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory" />
	</beans:bean>
	
	
	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</beans:bean>
	
	
	<context:component-scan base-package="com.myspring.pro30" />
	<!-- <context:component-scan>은 @Controller, @RestController, @Service, @Repository 등과 같은 
		  어노테이션을 가진 클래스를 스캔하고 빈으로 등록해주는 역할을 함. -->
		  
	<!-- 스프링 MVC에서 <context:component-scan>을 사용하면 기본적으로 
		 RequestMappingHandlerMapping과 RequestMappingHandlerAdapter가 자동으로 등록되어
		 위의 어노테이션을 매핑할 수 있음. -->

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*/*.do" />
			<beans:bean
				class="com.myspring.pro30.common.interceptor.ViewNameInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>


	<!-- 멀티파트 리졸버 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="52428800" />
		<beans:property name="maxInMemorySize" value="52428800" />
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>




</beans:beans>
